
<section class="">
    <!-- Two Cards -->
    <div class="font-Outfit flex w-full justify-center gap-3 items-stretch px-2">
      <!-- Card 1 -->
      <div class="flex-1 p-2">
        <div class="px-3 py-4 sm:px-4 sm:py-6 rounded-xl bg-lightGreen shadow-lg transition-shadow hover:shadow-2xl flex flex-col items-start space-y-3 sm:space-y-6">
          <div class="mb-2 sm:mb-4 bg-gradient-to-r from-green-400 to-green-600 p-2 rounded-full">
            <i class="fa-regular fa-folder text-white text-lg sm:text-xl lg:text-2xl"></i>
          </div>
          <div class="flex flex-col sm:flex-row sm:gap-x-4 md:gap-x-6 lg:gap-x-8 w-full text-lightGray">
            <div class="flex flex-col items-start font-thin">
              <p class="text-xs sm:text-sm md:text-base lg:text-lg tracking-wide">Total Food</p>
              <p class="pt-1 text-lg sm:text-xl md:text-2xl lg:text-3xl font-semibold tracking-wide"><%= @food_inventory_count %></p>
            </div>
            <div class="flex flex-col items-start font-thin">
              <p class="text-xs sm:text-sm md:text-base lg:text-lg tracking-wide">Total Cash</p>
              <p class="pt-1 text-lg sm:text-xl md:text-2xl lg:text-3xl font-semibold tracking-wide">316</p>
            </div>
          </div>
        </div>
      </div>
      <!-- Card 2 -->
      <div class="flex-1 p-2">
        <div class="px-3 py-4 sm:px-4 sm:py-6 rounded-xl bg-white shadow-lg transition-shadow hover:shadow-2xl flex flex-col items-start space-y-3 sm:space-y-6">
          <div class="mb-2 sm:mb-4 bg-gradient-to-r from-gray-400 to-gray-600 p-2 rounded-full">
            <i class="fa-solid fa-user-group text-white text-lg sm:text-xl lg:text-2xl"></i>
          </div>
          <div class="flex flex-col sm:flex-row sm:gap-x-4 md:gap-x-6 lg:gap-x-8 w-full text-black">
            <div class="flex flex-col items-start font-thin">
              <p class="text-red-600 text-xs sm:text-sm md:text-base lg:text-lg tracking-wide">Low Stock</p>
              <p class="pt-1 text-lg sm:text-xl md:text-2xl lg:text-3xl font-semibold tracking-wide">23</p>
            </div>
            <div class="flex flex-col items-start font-thin">
              <p class="text-xs sm:text-sm md:text-base lg:text-lg tracking-wide">Other donations</p>
              <p class="pt-1 text-lg sm:text-xl md:text-2xl lg:text-3xl font-semibold tracking-wide">3</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Section -->
    <div class="font-Outfit flex justify-between items-center p-5">
      <!-- Small screen remove button -->
      <button class="md:hidden bg-gray-200 p-3 rounded-full flex justify-center items-center shadow-md hover:bg-red-100 transition-all">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
      <!-- Page title for medium and larger screens -->
      <p class="hidden md:block font-semibold text-lg text-gray-800">Inventories</p>
      <div class="flex items-center space-x-4">
        <!-- Remove button for medium and larger screens -->
        <div class="hidden md:flex items-center space-x-2 bg-red-100 hover:bg-red-200 px-4 py-2 rounded-lg shadow-md transition-all">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
          <p class="text-sm font-medium text-gray-800">Clear</p>
        </div>
        <!-- Filter button -->
        <button class="border-2 border-gray-300 hover:bg-gray-100 focus:outline-none px-4 py-2 flex items-center space-x-2 rounded-lg shadow-md transition-all">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2a1 1 0 01-.293.707l-6.6 6.6a1 1 0 00-.293.707V17a1 1 0 01-.293.707l-2 2A1 1 0 0110 20v-3.586a1 1 0 00-.293-.707L3.293 6.707A1 1 0 013 6V4z" />
          </svg>
          <span class="text-sm font-medium text-gray-800">Filter</span>
        </button>
      </div>
    </div>
</section>

  <%= turbo_frame_tag "inventories" do %>
    <div class="flow-root mt-8">
      <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
        <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
          <div class="inventories__table--shadow overflow-hidden border border-gray-200 rounded-lg">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50 font-bold">
                <tr>
                  <th class="py-2 px-4 text-sm">
                    <input type="checkbox" id="select-all" class="form-checkbox hidden md:flex rounded-md" aria-label="Select all items">
                  </th>
                  <%= sortable_table_header 'Food Name', :food_name, :inventories_path, class: 'py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider' %>
                  <%= sortable_table_header 'Donation Amount', :amount, :inventories_path, class: 'py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider' %>
                  <%= sortable_table_header 'Collection Date', :collection_date, :inventories_path, class: 'py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider' %>
                  <%= sortable_table_header 'Expired Date', :expire_date, :inventories_path, class: 'py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider' %>
                  <%= sortable_table_header 'Status', :status, :inventories_path, class: 'py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden md:table-cell' %>
                  <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden md:table-cell">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody class="bg-white">
                <% @inventories.each do |inventory| %>
                  <tr class="hover:bg-gray-100 transition-colors">
                    <!-- Select Checkbox -->
                    <td class="py-2 px-4 text-sm">
                      <input type="checkbox" name="selected_inventories[]" value="<%= inventory.id %>" class="form-checkbox rounded-md inventory-checkbox hidden md:flex" aria-label="Select inventory <%= inventory.id %>">
                    </td>
                    <!-- Food Name -->
                    <td class="py-2 px-4 text-sm text-gray-600 text-center cursor-pointer" data-url="<%= inventory_path(inventory) %>">
                      <%= inventory.food_name %>
                    </td>
                    <!-- Donation Amount -->
                    <td class="py-2 px-4 text-sm text-gray-600 text-center cursor-pointer" data-url="<%= inventory_path(inventory) %>">
                      <%= number_to_human(inventory.amount) %>
                    </td>
                    <!-- Collection Date -->
                    <td class="py-2 px-4 text-sm text-gray-600 text-center cursor-pointer" data-url="<%= inventory_path(inventory) %>">
                      <%= inventory.collection_date.strftime('%Y-%m-%d') %>
                    </td>
                    <!-- Expired Date -->
                    <td class="py-2 px-4 text-sm text-gray-600 text-center cursor-pointer" data-url="<%= inventory_path(inventory) %>">
                      <%= inventory.expire_date ? inventory.expire_date.strftime('%Y-%m-%d') : 'N/A' %>
                    </td>
                    <!-- Status -->
                    <td class="py-2 px-4 text-sm text-gray-600 hidden md:table-cell">
                      <% if inventory.request&.is_selected.nil? %>
                        <%= image_tag 'Alert circle.svg', alt: 'Not Selected', class: 'icon-class' %>
                      <% else %>
                        <%= image_tag 'Check circle.svg', alt: 'Selected', class: 'icon-class' %>
                      <% end %>
                    </td>
                    <!-- Actions -->
                    <td class="py-2 px-4 text-sm text-gray-600 hidden md:table-cell">
                      <button onclick="window.location.href='<%= inventory_path(inventory) %>'"  data-remote="true" data-url="<%= inventory_path(inventory) %>" type="button">
                        <%= image_tag("Icon.svg", alt: "show-icon", class: "show-action-icon") %>
                      </button>
                      <button data-modal-target="edit-modal" data-modal-toggle="edit-modal" class="" type="button">
                        <%= image_tag("Edit.svg", alt: "edit-icon", class: "action-icon") %>
                      </button>
                    </td>
                  </tr>
                <% end %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  <% end %>
  <div class="pagination-container  flex items-center justify-between py-4">
    <!-- Items per page dropdown -->
    <div class="items-per-page">
      <select id="items-per-page" name="per_page" onchange="window.location.href='?per_page=' + this.value" class="rounded-lg bg-gray-200 px-2 py-1">
        <% [10, 25, 50, 100, 'All'].each do |count| %>
          <option class="text-xs" value="<%= count == 'All' ? 0 : count %>" <%= 'selected' if count == @per_page || (count == 'All' && @per_page == 0) %>>
            <%= count == 'All' ? 'Show All' : count %>
          </option>
          <% end %>
        </select>
        <label for="items-per-page" class="text-xs">Items per page</label>
      </div>
      <div class="flex justify-between gap-4">
        <!-- Current page display -->
        <div class="page-display flex items-center">
          <input id="current-page" type="number" min="1" max="<%= @total_pages %>" value="<%= @page_no %>" class=" rounded-lg px-2 py-1 bg-gray-200 text-center w-12"
      onchange="window.location.href='?page=' + this.value + '&per_page=' + document.getElementById('items-per-page').value">
          <span class="ml-2">of <%= @total_pages %> pages</span>
        </div>
        <!-- Navigation buttons -->
        <div class="pagination-buttons flex gap-4 items-center">
          <% if @page_no > 1 %>
            <%= link_to '<', inventories_path(page: @page_no - 1, per_page: @per_page)%>
          <% else %>
            <span><</span>
              <% end %>
              <% if @page_no < @total_pages %>
                <%= link_to '>', inventories_path(page: @page_no + 1, per_page: @per_page)  %>
              <% else %>
                <span >></span>
              <% end %>
            </div>
          </div>
        </div>
        <script>
          document.addEventListener("turbo:load", function() {
            const modal = document.getElementById("modal");
            const openModalBtn = document.getElementById("filter-action");
            const closeModalBtn = document.getElementById("close-modal");
            const selectAllCheckbox = document.getElementById("select-all");
            const inventoryCheckboxes = document.querySelectorAll(".inventory-checkbox");
            const bulkDeleteBtn = document.querySelector("#bulk-delete");

            selectAllCheckbox.addEventListener("change", () => {
                inventoryCheckboxes.forEach(checkbox => {
                    checkbox.checked = selectAllCheckbox.checked;
                });
            });


            bulkDeleteBtn.addEventListener("click", () => {
              const selectedIds = Array.from(inventoryCheckboxes)
                .filter(checkbox => checkbox.checked)
                .map(checkbox => checkbox.value);

              if (selectedIds.length > 0) {
                if (confirm("Are you sure you want to delete the selected items?")) {
                  fetch("/inventories/bulk_delete", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                      "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
                    },
                    body: JSON.stringify({ ids: selectedIds })
                  }).then(response => {
                    if (response.ok) {
                      location.reload();
                    } else {
                      alert("Failed to delete items.");
                    }
                  });
                }
              } else {
                alert("No items selected.");
              }
            });

            openModalBtn.addEventListener("click", () => {
              modal.classList.remove("hidden");
            });

            closeModalBtn.addEventListener("click", () => {
              modal.classList.add("hidden");
            });

          });
        </script>
        <script>
          document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('button[data-modal-toggle]').forEach(button => {
              button.addEventListener('click', async () => {
                const modalId = button.getAttribute('data-modal-target');
                const modal = document.getElementById(modalId);
                const url = button.getAttribute('data-url');
                const inventoryId = button.dataset.id;
                console.log(inventoryId)

                if (url && modal) {
                  const modalContent = modal.querySelector(`#modal-content-${inventoryId}`);
                  if (modalContent) {
                    try {
                      const response = await fetch(url);
                      if (response.ok) {
                        const html = await response.text();
                        console.log(html)
                        console.log(url)
                        modalContent.innerHTML = html;
                      } else {
                        modalContent.innerHTML = '<p class="text-red-500">Failed to load inventory data.</p>';
                      }
                    } catch (error) {
                      console.error('Error loading modal content:', error);
                      modalContent.innerHTML = '<p class="text-red-500">Failed to load inventory data.</p>';
                    }
                  }
                  modal.classList.remove('hidden');
                }
              });
            });
          });

          function updateRangeValue(value, type) {
              if (type === 'min') {
                document.getElementById('min-range-value').textContent = value;
                document.getElementById('collection_amount_min').value = value;
              } else if (type === 'max') {
                document.getElementById('max-range-value').textContent = value;
                document.getElementById('collection_amount_max').value = value;
              }
          }
        </script>